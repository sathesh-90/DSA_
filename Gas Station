class Solution(object):
    def canCompleteCircuit(self, gas, cost):
        """
        :type gas: List[int]
        :type cost: List[int]
        :rtype: int
        """
        total_tank = 0    # Net total of gas - cost over all stations
        curr_tank = 0     # Current gas balance during the trip
        start_station = 0 # Potential starting station
        
        for i in range(len(gas)):
            total_tank += gas[i] - cost[i]
            curr_tank += gas[i] - cost[i]
            
            # If we run out of gas before reaching next station,
            # we cannot start from any station before this one.
            if curr_tank < 0:
                start_station = i + 1
                curr_tank = 0
        
        # If total gas >= total cost, a solution exists.
        return start_station if total_tank >= 0 else -1
